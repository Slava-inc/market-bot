import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from dotenv import load_dotenv

import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path='env_var')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('market.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY,
            name TEXT,
            price REAL
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            amount REAL,
            product_id INTEGER
        )
    ''')
    conn.commit()
    # –ó–∞–ø–æ–ª–Ω–∏–º —Ç–æ–≤–∞—Ä—ã (91 —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä)
    for i in range(1, 92):
        c.execute("INSERT OR IGNORE INTO products (id, name, price) VALUES (?, ?, ?)", (i, f"–¢–æ–≤–∞—Ä {i}", 10.0))
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('market.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance')],
        [InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit')],
        [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data='withdraw')],
        [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='products')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç!', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    conn = sqlite3.connect('market.db')
    c = conn.cursor()

    if query.data == 'balance':
        c.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = c.fetchone()[0]
        await query.edit_message_text(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.')

    elif query.data == 'deposit':
        await query.edit_message_text("–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–∞—à —Å—á—ë—Ç.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ /confirm <—Å—É–º–º–∞>")

    elif query.data == 'withdraw':
        await query.edit_message_text("–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /withdraw <—Å—É–º–º–∞>")

    elif query.data == 'products':
        keyboard = []
        c.execute("SELECT id, name, price FROM products")
        products = c.fetchall()
        for pid, name, price in products:
            keyboard.append([InlineKeyboardButton(f"{name} - {price} —Ä—É–±.", callback_data=f'buy_{pid}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=reply_markup)

    elif query.data.startswith('buy_'):
        product_id = int(query.data.split('_')[1])
        c.execute("SELECT price FROM products WHERE id = ?", (product_id,))
        price = c.fetchone()[0]
        c.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = c.fetchone()[0]

        if balance >= price:
            c.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (price, user_id))
            c.execute("INSERT INTO transactions (user_id, type, amount, product_id) VALUES (?, ?, ?, ?)",
                      (user_id, 'purchase', -price, product_id))
            conn.commit()
            await query.edit_message_text(f"‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä {product_id}.")
        else:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
async def confirm_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(context.args[0])
        user_id = update.effective_user.id
        conn = sqlite3.connect('market.db')
        c = conn.cursor()
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        c.execute("INSERT INTO transactions (user_id, type, amount) VALUES (?, ?, ?)",
                  (user_id, 'deposit', amount))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm <—Å—É–º–º–∞>")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(context.args[0])
        user_id = update.effective_user.id
        conn = sqlite3.connect('market.db')
        c = conn.cursor()
        c.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = c.fetchone()[0]
        if balance >= amount:
            c.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
            c.execute("INSERT INTO transactions (user_id, type, amount) VALUES (?, ?, ?)",
                      (user_id, 'withdraw', -amount))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ {amount} —Ä—É–±.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        conn.close()
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /withdraw <—Å—É–º–º–∞>")


def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    TELEGRAM_BOT_TOKEN = os.getenv('TOKEN')
    print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN}")
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª env_var —Å–æ–¥–µ—Ä–∂–∏—Ç TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        return

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("confirm", confirm_deposit))
    application.add_handler(CommandHandler("withdraw", withdraw))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()